{"mappings":"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","sources":["<anon>","js/particle.js"],"sourcesContent":["(function($) {\n    \"use strict\";\n    $(function() {\n        var MainStage = function() {\n            var $window = $(window), windowWidth = window.innerWidth, windowHeight = window.innerHeight, rendererCanvasID = \"3D-particle-effect-canvas\";\n            var renderer, texture, scene, camera, particles, imagedata, clock = new THREE.Clock(), mouseX = 0, mouseY = 0, isMouseDown = true, lastMousePos = {\n                x: 0,\n                y: 0\n            }, windowHalfX = windowWidth / 2, windowHalfY = windowHeight / 2;\n            //particle rotation\n            var particleRotation;\n            var centerVector = new THREE.Vector3(0, 0, 0);\n            var previousTime = 0;\n            function init() {\n                //@https://github.com/mrdoob/three.js/blob/dev/src/extras/ImageUtils.js#L21\n                THREE.ImageUtils.crossOrigin = \"\";\n                //WebGL Renderer\n                renderer = new THREE.WebGLRenderer({\n                    canvas: document.getElementById(rendererCanvasID),\n                    alpha: true,\n                    antialias: true\n                });\n                renderer.setSize(windowWidth, windowHeight);\n                //Scene\n                scene = new THREE.Scene();\n                //camera\n                camera = new THREE.PerspectiveCamera(50, windowWidth / windowHeight, 0.1, 10000);\n                camera.position.set(-100, 0, 600);\n                camera.lookAt(centerVector);\n                scene.add(camera);\n                // add particle rotation\n                particleRotation = new THREE.Object3D();\n                scene.add(particleRotation);\n                var geometryPR = new THREE.TetrahedronGeometry(2, 0), materialPR = new THREE.MeshPhongMaterial({\n                    color: 0xffffff,\n                    flatShading: THREE.FlatShading\n                });\n                for(var i = 0; i < 300; i++){\n                    var mesh = new THREE.Mesh(geometryPR, materialPR);\n                    mesh.position.set(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize();\n                    mesh.position.multiplyScalar(90 + Math.random() * 700);\n                    mesh.rotation.set(Math.random() * 2, Math.random() * 2, Math.random() * 2);\n                    particleRotation.add(mesh);\n                }\n                var ambientLight = new THREE.AmbientLight(0x999999);\n                scene.add(ambientLight);\n                var lights = [];\n                lights[0] = new THREE.DirectionalLight(0xffffff, 1);\n                lights[0].position.set(1, 0, 0);\n                lights[1] = new THREE.DirectionalLight(0x11e8bb, 1);\n                lights[1].position.set(0.75, 1, 0.5);\n                lights[2] = new THREE.DirectionalLight(0x8200c9, 1);\n                lights[2].position.set(-0.75, -1, 0.5);\n                scene.add(lights[0]);\n                scene.add(lights[1]);\n                scene.add(lights[2]);\n                //----\n                document.addEventListener(\"mousemove\", onDocumentMouseMove, false);\n                // document.addEventListener(\"touchstart\", onDocumentTouchStart, false);\n                // document.addEventListener(\"touchmove\", onDocumentTouchMove, false);\n                document.addEventListener(\"mousedown\", onDocumentMouseDown, false);\n                document.addEventListener(\"mouseup\", onDocumentMouseUp, false);\n                // Fires when the window changes\n                window.addEventListener(\"resize\", onWindowResize, false);\n            }\n            function render() {\n                requestAnimationFrame(render);\n                var delta = clock.getDelta(), thickness = 40;\n                //Need to add judgment to avoid Cannot read property 'geometry' of undefined\n                if (typeof particles != \"undefined\") {\n                    for(var i = 0, j = particles.geometry.vertices.length; i < j; i++){\n                        var particle = particles.geometry.vertices[i];\n                        particle.x += (particle.destination.x - particle.x) * particle.speed;\n                        particle.y += (particle.destination.y - particle.y) * particle.speed;\n                        particle.z += (particle.destination.z - particle.z) * particle.speed;\n                    }\n                    if (delta - previousTime > thickness) {\n                        var index = Math.floor(Math.random() * particles.geometry.vertices.length);\n                        var particle1 = particles.geometry.vertices[index];\n                        var particle2 = particles.geometry.vertices[particles.geometry.vertices.length - index];\n                        TweenMax.to(particle, Math.random() * 2 + 1, {\n                            x: particle2.x,\n                            y: particle2.y,\n                            ease: Power2.easeInOut\n                        });\n                        TweenMax.to(particle2, Math.random() * 2 + 1, {\n                            x: particle1.x,\n                            y: particle1.y,\n                            ease: Power2.easeInOut\n                        });\n                        previousTime = delta;\n                    }\n                    particles.geometry.verticesNeedUpdate = true;\n                }\n                if (!isMouseDown) {\n                    camera.position.x += (0 - camera.position.x) * 0.06;\n                    camera.position.y += (0 - camera.position.y) * 0.06;\n                }\n                camera.position.x += (mouseX - camera.position.x) * 0.09;\n                camera.position.y += (-mouseY - camera.position.y) * 0.09;\n                camera.lookAt(centerVector);\n                //particle rotation\n                particleRotation.rotation.x += 0.0;\n                particleRotation.rotation.y -= 0.004;\n                renderer.render(scene, camera);\n            }\n            function onWindowResize() {\n                camera.aspect = window.innerWidth / window.innerHeight;\n                camera.updateProjectionMatrix();\n                renderer.setSize(window.innerWidth, window.innerHeight);\n            }\n            function onDocumentMouseMove(event) {\n                mouseX = event.clientX - windowHalfX;\n                mouseY = event.clientY - windowHalfY;\n                if (isMouseDown) {\n                    camera.position.x += (event.clientX - lastMousePos.x) / 100;\n                    camera.position.y -= (event.clientY - lastMousePos.y) / 100;\n                    camera.lookAt(centerVector);\n                    lastMousePos = {\n                        x: event.clientX,\n                        y: event.clientY\n                    };\n                }\n            }\n            function onDocumentTouchStart(event) {\n                if (event.touches.length == 1) {\n                    event.preventDefault();\n                    mouseX = event.touches[0].pageX - windowHalfX;\n                    mouseY = event.touches[0].pageY - windowHalfY;\n                }\n            }\n            function onDocumentTouchMove(event) {\n                if (event.touches.length == 1) {\n                    event.preventDefault();\n                    mouseX = event.touches[0].pageX - windowHalfX;\n                    mouseY = event.touches[0].pageY - windowHalfY;\n                }\n            }\n            function onDocumentMouseUp() {\n                isMouseDown = false;\n            }\n            function onDocumentMouseDown(event) {\n                isMouseDown = true;\n                lastMousePos = {\n                    x: event.clientX,\n                    y: event.clientY\n                };\n            }\n            /*\r\n       * Get Image Data when Draw Image To Canvas\r\n       *\r\n       * @param  {Object} image         - Overridden with a record type holding data, width and height.\r\n       * @return {JSON}                 - The image data.\r\n       */ function getImageData(image) {\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                var ctx = canvas.getContext(\"2d\");\n                ctx.drawImage(image, 0, 0);\n                return ctx.getImageData(0, 0, image.width, image.height);\n            }\n            //\n            //-------------------------------------\n            return {\n                init: init,\n                render: render,\n                getScene: function() {\n                    return scene;\n                },\n                getCamera: function() {\n                    return camera;\n                }\n            };\n        }();\n        MainStage.init();\n        MainStage.render();\n    });\n})(jQuery);\n\n//# sourceMappingURL=index.5e1cdb68.js.map\n","(function ($) {\r\n  \"use strict\";\r\n\r\n  $(function () {\r\n    var MainStage = (function () {\r\n      var $window = $(window),\r\n        windowWidth = window.innerWidth,\r\n        windowHeight = window.innerHeight,\r\n        rendererCanvasID = \"3D-particle-effect-canvas\";\r\n\r\n      var renderer,\r\n        texture,\r\n        scene,\r\n        camera,\r\n        particles,\r\n        imagedata,\r\n        clock = new THREE.Clock(),\r\n        mouseX = 0,\r\n        mouseY = 0,\r\n        isMouseDown = true,\r\n        lastMousePos = { x: 0, y: 0 },\r\n        windowHalfX = windowWidth / 2,\r\n        windowHalfY = windowHeight / 2;\r\n\r\n      //particle rotation\r\n      var particleRotation;\r\n\r\n      var centerVector = new THREE.Vector3(0, 0, 0);\r\n      var previousTime = 0;\r\n\r\n      function init() {\r\n        //@https://github.com/mrdoob/three.js/blob/dev/src/extras/ImageUtils.js#L21\r\n        THREE.ImageUtils.crossOrigin = \"\";\r\n\r\n        //WebGL Renderer\r\n        renderer = new THREE.WebGLRenderer({\r\n          canvas: document.getElementById(rendererCanvasID), //canvas\r\n          alpha: true,\r\n          antialias: true,\r\n        });\r\n\r\n        renderer.setSize(windowWidth, windowHeight);\r\n\r\n        //Scene\r\n        scene = new THREE.Scene();\r\n\r\n        //camera\r\n        camera = new THREE.PerspectiveCamera(\r\n          50,\r\n          windowWidth / windowHeight,\r\n          0.1,\r\n          10000\r\n        );\r\n        camera.position.set(-100, 0, 600);\r\n        camera.lookAt(centerVector);\r\n        scene.add(camera);\r\n\r\n        // add particle rotation\r\n        particleRotation = new THREE.Object3D();\r\n        scene.add(particleRotation);\r\n        var geometryPR = new THREE.TetrahedronGeometry(2, 0),\r\n          materialPR = new THREE.MeshPhongMaterial({\r\n            color: 0xffffff,\r\n            flatShading: THREE.FlatShading,\r\n          });\r\n\r\n        for (var i = 0; i < 300; i++) {\r\n          var mesh = new THREE.Mesh(geometryPR, materialPR);\r\n          mesh.position\r\n            .set(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5)\r\n            .normalize();\r\n          mesh.position.multiplyScalar(90 + Math.random() * 700);\r\n          mesh.rotation.set(\r\n            Math.random() * 2,\r\n            Math.random() * 2,\r\n            Math.random() * 2\r\n          );\r\n          particleRotation.add(mesh);\r\n        }\r\n\r\n        var ambientLight = new THREE.AmbientLight(0x999999);\r\n        scene.add(ambientLight);\r\n\r\n        var lights = [];\r\n        lights[0] = new THREE.DirectionalLight(0xffffff, 1);\r\n        lights[0].position.set(1, 0, 0);\r\n        lights[1] = new THREE.DirectionalLight(0x11e8bb, 1);\r\n        lights[1].position.set(0.75, 1, 0.5);\r\n        lights[2] = new THREE.DirectionalLight(0x8200c9, 1);\r\n        lights[2].position.set(-0.75, -1, 0.5);\r\n        scene.add(lights[0]);\r\n        scene.add(lights[1]);\r\n        scene.add(lights[2]);\r\n\r\n        //----\r\n        document.addEventListener(\"mousemove\", onDocumentMouseMove, false);\r\n        // document.addEventListener(\"touchstart\", onDocumentTouchStart, false);\r\n        // document.addEventListener(\"touchmove\", onDocumentTouchMove, false);\r\n\r\n        document.addEventListener(\"mousedown\", onDocumentMouseDown, false);\r\n        document.addEventListener(\"mouseup\", onDocumentMouseUp, false);\r\n\r\n        // Fires when the window changes\r\n        window.addEventListener(\"resize\", onWindowResize, false);\r\n      }\r\n\r\n      function render() {\r\n        requestAnimationFrame(render);\r\n\r\n        var delta = clock.getDelta(),\r\n          thickness = 40;\r\n\r\n        //Need to add judgment to avoid Cannot read property 'geometry' of undefined\r\n        if (typeof particles != typeof undefined) {\r\n          for (var i = 0, j = particles.geometry.vertices.length; i < j; i++) {\r\n            var particle = particles.geometry.vertices[i];\r\n            particle.x +=\r\n              (particle.destination.x - particle.x) * particle.speed;\r\n            particle.y +=\r\n              (particle.destination.y - particle.y) * particle.speed;\r\n            particle.z +=\r\n              (particle.destination.z - particle.z) * particle.speed;\r\n          }\r\n\r\n          if (delta - previousTime > thickness) {\r\n            var index = Math.floor(\r\n              Math.random() * particles.geometry.vertices.length\r\n            );\r\n            var particle1 = particles.geometry.vertices[index];\r\n            var particle2 =\r\n              particles.geometry.vertices[\r\n                particles.geometry.vertices.length - index\r\n              ];\r\n\r\n            TweenMax.to(particle, Math.random() * 2 + 1, {\r\n              x: particle2.x,\r\n              y: particle2.y,\r\n              ease: Power2.easeInOut,\r\n            });\r\n\r\n            TweenMax.to(particle2, Math.random() * 2 + 1, {\r\n              x: particle1.x,\r\n              y: particle1.y,\r\n              ease: Power2.easeInOut,\r\n            });\r\n\r\n            previousTime = delta;\r\n          }\r\n\r\n          particles.geometry.verticesNeedUpdate = true;\r\n        }\r\n\r\n        if (!isMouseDown) {\r\n          camera.position.x += (0 - camera.position.x) * 0.06;\r\n          camera.position.y += (0 - camera.position.y) * 0.06;\r\n        }\r\n\r\n        camera.position.x += (mouseX - camera.position.x) * 0.09;\r\n        camera.position.y += (-mouseY - camera.position.y) * 0.09;\r\n        camera.lookAt(centerVector);\r\n\r\n        //particle rotation\r\n        particleRotation.rotation.x += 0.0;\r\n        particleRotation.rotation.y -= 0.004;\r\n\r\n        renderer.render(scene, camera);\r\n      }\r\n\r\n      function onWindowResize() {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n      }\r\n\r\n      function onDocumentMouseMove(event) {\r\n        mouseX = event.clientX - windowHalfX;\r\n        mouseY = event.clientY - windowHalfY;\r\n\r\n        if (isMouseDown) {\r\n          camera.position.x += (event.clientX - lastMousePos.x) / 100;\r\n          camera.position.y -= (event.clientY - lastMousePos.y) / 100;\r\n          camera.lookAt(centerVector);\r\n          lastMousePos = { x: event.clientX, y: event.clientY };\r\n        }\r\n      }\r\n\r\n      function onDocumentTouchStart(event) {\r\n        if (event.touches.length == 1) {\r\n          event.preventDefault();\r\n\r\n          mouseX = event.touches[0].pageX - windowHalfX;\r\n          mouseY = event.touches[0].pageY - windowHalfY;\r\n        }\r\n      }\r\n\r\n      function onDocumentTouchMove(event) {\r\n        if (event.touches.length == 1) {\r\n          event.preventDefault();\r\n\r\n          mouseX = event.touches[0].pageX - windowHalfX;\r\n          mouseY = event.touches[0].pageY - windowHalfY;\r\n        }\r\n      }\r\n\r\n      function onDocumentMouseUp() {\r\n        isMouseDown = false;\r\n      }\r\n\r\n      function onDocumentMouseDown(event) {\r\n        isMouseDown = true;\r\n        lastMousePos = { x: event.clientX, y: event.clientY };\r\n      }\r\n\r\n      /*\r\n       * Get Image Data when Draw Image To Canvas\r\n       *\r\n       * @param  {Object} image         - Overridden with a record type holding data, width and height.\r\n       * @return {JSON}                 - The image data.\r\n       */\r\n      function getImageData(image) {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = image.width;\r\n        canvas.height = image.height;\r\n\r\n        var ctx = canvas.getContext(\"2d\");\r\n        ctx.drawImage(image, 0, 0);\r\n\r\n        return ctx.getImageData(0, 0, image.width, image.height);\r\n      }\r\n\r\n      //\r\n      //-------------------------------------\r\n      return {\r\n        init: init,\r\n        render: render,\r\n        getScene: function () {\r\n          return scene;\r\n        },\r\n        getCamera: function () {\r\n          return camera;\r\n        },\r\n      };\r\n    })();\r\n\r\n    MainStage.init();\r\n    MainStage.render();\r\n  });\r\n})(jQuery);\r\n"],"names":["$","MainStage","window","particleRotation","renderer","scene","camera","particles","windowWidth","innerWidth","windowHeight","innerHeight","clock","THREE","Clock","mouseX","mouseY","isMouseDown","lastMousePos","x","y","windowHalfX","windowHalfY","centerVector","Vector3","previousTime","onWindowResize","aspect","updateProjectionMatrix","setSize","onDocumentMouseMove","event","clientX","clientY","position","lookAt","onDocumentMouseUp","onDocumentMouseDown","init","ImageUtils","crossOrigin","WebGLRenderer","canvas","document","getElementById","alpha","antialias","Scene","PerspectiveCamera","set","add","Object3D","geometryPR","TetrahedronGeometry","materialPR","MeshPhongMaterial","color","flatShading","FlatShading","i","mesh","Mesh","Math","random","normalize","multiplyScalar","rotation","ambientLight","AmbientLight","lights","DirectionalLight","addEventListener","render","requestAnimationFrame","delta","getDelta","j","geometry","vertices","length","particle","destination","speed","z","index","floor","particle1","particle2","TweenMax","to","ease","Power2","easeInOut","verticesNeedUpdate","getScene","getCamera","jQuery"],"version":3,"file":"index.5e1cdb68.js.map"}